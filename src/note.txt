关于打包报错的一些问题
1、在webpack.config.dev.js中的HtmlWebpackPlugin中未添加以哪个模板
   为基准生成一个打包后的新的html文件
2、逐个检查一遍文件，在src/main.js中发现ReactDom.render中的div格式很
   奇怪，语法提示已经有报错了，修改之，保存后又回原样了，是安装的插件
	 导致的，关闭JS-HTML-CSS Formatter插件之后再保存不再格式化，解决
3、重新执行打包命令，npm run dev解决问题

//devserve使用
1、安装包npm i -D webpack-dev-serve
2、在package.json中的script标签中添加dev:"webpack-dev-server"
3、运行npm run dev即可启动
4、注意的一个问题，当保存之后会自动重新编译，然后替换资源从而在浏览器中
   重新加载新的保存后的代码，这个在配置文件中是可以进行定制的
5、和module平级的地方添加devServer，然后添加配置参数

//引入css样式
1、安装css-loader,npm i -D css-loader
2、配置css-loader项，直接use:["css-loader"]即可，使用它的基本功能就行
3、此时发现还是不行，虽然打包后的代码中已经有了这个样式，但是还未被加载
   到页面中，还需要添加一个style-loader才行

//在css文件中引入图片资源
1、同样会报错，提示你需要安装某个loader
2、解析图片类型的资源需要的是file-loader
3、然后在webpack.config.dev.js中配置对应的loader即可
4、需要注意的一点，重新配置上面文件之后需要重启项目即可看到效果
5、顺便加一条，需要背景图片撑满全屏使用bacnground-size:100%
6、打包之后会在dist目录下面生成一个图片，这个图片名实际是图片的路径地址
   使用localhost:9000/+图片地址即可访问

//在html文件中引入图片资源
1、在main.js文件中需要将图片作为一个模块引入
2、然后在html中使用变量的形式引入 <img src={bgPicture} />

//url-loader方式引入图片
1、安装包 npm i -D url-loader
2、url-loader和file-loader的不同之处在于在浏览器中查看的时候url-loader生成的是base64编码的图片
3、好处在于浏览器可以直接识别base64格式的文件的，从而减少了请求的压力，但是同时存在一个问题，如果
   这个图片很大的时候就会有压力，速度减慢等，当小到某个值才编码，否则就应该打包
4、一个区别，当使用file-loader时候执行打包命令，会在dist目录下生成对应的图片打包路径，而使用
   url-loader则不会生成，通过设置limit可以区分哪些超大的文件会被打包，而不超出的直接在浏览器
	 中以地址的形式直接加载

//引入字体文件，需要使用到的还是file-loader
1、经测试需要将main.js中的render中的第一个div元素删除才行，具体的原因暂不明确，有关react相关的
   等后续学习react之后再做答疑到底什么原因
2、接上面，具体原因可能和vue等组件里面写法是一样的，都是只能有一个最外层的div
3、经查阅引入的font-awesome中的css文件，字体文件后面是一个问好加字体的版本，而正则中写的匹配字体
   的表达式是/\.ttf$/这样的，为什么还会匹配到这个表达式呢？是因为webpack自动将这个字体文件进行了
	 一些处理，使之可以匹配到。
4、启用css模块化之后使用的方式需要做部分调整，不能直接使用import "xxx/css"而要使用
   import a from "xxx/css"的方式进行使用
	 css模块化就是对类名进行重新的编译

//此时遇到一个问题，之前使用的font-awesome字体图标并为生效
1、如果我们想在 全局环境下使用这个样式类名该如何做，使用第三方的库类名该如何处理？
2、需要做一些排除性的工作，第三方库一般位于nodemodules中，使用exclude排除某些不需要模块化
   的东西，在任何模块文件内部，可以使用__dirname变量获取当前模块文件所在目录的完整绝对路径
3、再写一套样式存在一个问题，由于wenpack解析loader是从后往前的，所以经过下面的css-loader
   解析之后当再匹配上面的css-loader之后就会报错，所以下面的那一条还需要加一个条件，当包括
	 上面的排除项node_modules和common目录时候才解析

//使用scss
1、安装依赖包 npm i -D sass-loader node-sass,不仅仅是安装sass-loader就行，还需要安装node-sass-loader
2、安装遇到的一点问题 使用npm 安装时候报错无法安装，采用cnpm进行安装
3、然后再书写匹配规则，数组中的选项是从后往前解析的，所以从后往前写法为sass-loader,css-loader,
   style-loader,这里需注意书写顺序
4、less使用方式同scss